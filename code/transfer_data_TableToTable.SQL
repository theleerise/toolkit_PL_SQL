/*
*
* Script (EDITABLE) para la transferencia de datos entre TABLAS
* bastante útil para volcado de datos entre tablas con columnas 
* similares (compatibles) gracias a su control de errores
* 
* Se especifican las columnas en el mismo orden que se quieren
* insertar en la tabla de destino y se especifica las dos TABLAS
* (en caso de ser necesario se especifican los esquemas o los
* dblink de las tablas)
* 
*/

DECLARE
    -- VARIABLES PARA DEFINIR TABLAS Y COLUMNAS
    vSQL VARCHAR2(4000);
    vCOLUMNAS_ORIGEN VARCHAR2(1000) := ''; -- EJEMPLO -> 'EMPRESA, NUMERO, MAQUINA...';
    vCOLUMNAS_DESTINO VARCHAR2(1000) := ''; -- EJEMPLO -> 'EMPRESA, NUMEOTRE, MAQUCODI...';
    vTABLA_ORIGEN VARCHAR2(100) := ''; -- ESQUEMA.TABLA_ORIGEN
    vTABLA_DESTINO VARCHAR2(100) := ''; -- ESQUEMA.TABLA_DESTINO

    -- VARIABLES PARA VALIDACIÓN
    vORIGEN_DATA_TYPE VARCHAR2(100);
    vORIGEN_DATA_LENGTH NUMBER;
    vDESTINO_DATA_TYPE VARCHAR2(100);
    vDESTINO_DATA_LENGTH NUMBER;

    -- VARIABLES AUXILIARES
    vCOLUMN_ORIGEN VARCHAR2(100);
    vCOLUMN_DESTINO VARCHAR2(100);
    vCOLUMN_COUNT NUMBER := 1;
    vMISMATCH EXCEPTION;
BEGIN
    -- VALIDAMOS que las columnas de ORIGEN sean iguales 
    -- o compatibles con las columnas de DESTINO
    LOOP
        vCOLUMN_ORIGEN := REGEXP_SUBSTR(vCOLUMNAS_ORIGEN, '[^,]+', 1, vCOLUMN_COUNT);
        vCOLUMN_DESTINO := REGEXP_SUBSTR(vCOLUMNAS_DESTINO, '[^,]+', 1, vCOLUMN_COUNT);

        EXIT WHEN vCOLUMN_ORIGEN IS NULL OR vCOLUMN_DESTINO IS NULL;

        -- OBTENER TIPO Y LONGITUD DE LAS COLUMNAS DE ORIGEN
        SELECT DATA_TYPE, DATA_LENGTH INTO vORIGEN_DATA_TYPE, vORIGEN_DATA_LENGTH
        FROM ALL_TAB_COLUMNS
        WHERE TABLE_NAME = UPPER(vTABLA_ORIGEN)
          AND COLUMN_NAME = TRIM(UPPER(vCOLUMN_ORIGEN));

        -- OBTENER TIPO Y LONGITUD DE LAS COLUMNAS DE DESTINO
        SELECT DATA_TYPE, DATA_LENGTH INTO vDESTINO_DATA_TYPE, vDESTINO_DATA_LENGTH
        FROM ALL_TAB_COLUMNS
        WHERE TABLE_NAME = UPPER(vTABLA_DESTINO)
          AND COLUMN_NAME = TRIM(UPPER(vCOLUMN_DESTINO));

        -- VALIDAR TIPOS DE DATOS Y LONGITUD
        IF vORIGEN_DATA_TYPE != vDESTINO_DATA_TYPE OR vORIGEN_DATA_LENGTH > vDESTINO_DATA_LENGTH THEN
            RAISE vMISMATCH;
        END IF;

        -- PASAR A LA SIGUIENTE COLUMNA
        vCOLUMN_COUNT := vCOLUMN_COUNT + 1;
    END LOOP;

    -- EJECUTAR EL INSERT SOLO SI LA VALIDACIÓN ES EXITOSA
    vSQL := 'INSERT INTO ' || vTABLA_DESTINO || ' (' || vCOLUMNAS_DESTINO || ') ' ||
             'SELECT ' || vCOLUMNAS_ORIGEN || ' FROM ' || vTABLA_ORIGEN;

    EXECUTE IMMEDIATE vSQL;

    DBMS_OUTPUT.PUT_LINE('Todos los datos han sido insertados exitosamente.');

EXCEPTION
    WHEN vMISMATCH THEN
        DBMS_OUTPUT.PUT_LINE('ERROR: LAS COLUMNAS NO SON COMPATIBLES EN TIPO DE DATO O LONGITUD.');
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('ERROR: UNA DE LAS COLUMNAS NO EXISTE EN LAS TABLAS ESPECIFICADAS.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('ERROR INESPERADO: ' || SQLERRM);
END;
